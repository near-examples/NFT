{"id":"../node_modules/near-api-js/lib/wallet-account.js","dependencies":[{"name":"/Users/jelilat/codes/NFT/package.json","includedInParent":true,"mtime":1650815999317},{"name":"/Users/jelilat/codes/NFT/node_modules/near-api-js/package.json","includedInParent":true,"mtime":1649759770555},{"name":"depd","loc":{"line":14,"column":39},"parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/Users/jelilat/codes/NFT/node_modules/depd/lib/browser/index.js"},{"name":"./account","loc":{"line":15,"column":26},"parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/account.js"},{"name":"./transaction","loc":{"line":16,"column":30},"parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/transaction.js"},{"name":"./utils","loc":{"line":17,"column":24},"parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/utils/index.js"},{"name":"borsh","loc":{"line":19,"column":24},"parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/Users/jelilat/codes/NFT/node_modules/borsh/lib/index.js"},{"name":"buffer","parent":"/Users/jelilat/codes/NFT/node_modules/near-api-js/lib/wallet-account.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nconst borsh_1 = require(\"borsh\");\nconst borsh_2 = require(\"borsh\");\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\nclass WalletConnection {\n    constructor(near, appKeyPrefix) {\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || { allKeys: [] };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletAccount is authorized with the wallet.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn();\n     * ```\n     */\n    isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */\n    getAccountId() {\n        return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */\n    async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {\n        let options;\n        if (typeof contractIdOrOptions === 'string') {\n            const deprecate = depd_1.default('requestSignIn(contractId, title)');\n            deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n            options = { contractId: contractIdOrOptions, successUrl, failureUrl };\n        }\n        else {\n            options = contractIdOrOptions;\n        }\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n        newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n        newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n        if (options.contractId) {\n            /* Throws exception if contract account does not exist */\n            const contractAccount = await this._near.account(options.contractId);\n            await contractAccount.state();\n            newUrl.searchParams.set('contract_id', options.contractId);\n            const accessKey = utils_1.KeyPair.fromRandom('ed25519');\n            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n        }\n        if (options.methodNames) {\n            options.methodNames.forEach(methodName => {\n                newUrl.searchParams.append('methodNames', methodName);\n            });\n        }\n        window.location.assign(newUrl.toString());\n    }\n    async requestSignTransactions(...args) {\n        if (Array.isArray(args[0])) {\n            const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n            deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n            return this._requestSignTransactions({\n                transactions: args[0],\n                callbackUrl: args[1],\n                meta: args[2]\n            });\n        }\n        return this._requestSignTransactions(args[0]);\n    }\n    async _requestSignTransactions({ transactions, meta, callbackUrl }) {\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL('sign', this._walletBaseUrl);\n        newUrl.searchParams.set('transactions', transactions\n            .map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction))\n            .map(serialized => Buffer.from(serialized).toString('base64'))\n            .join(','));\n        newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n        if (meta)\n            newUrl.searchParams.set('meta', meta);\n        window.location.assign(newUrl.toString());\n    }\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n    async _completeSignInWithAccessKey() {\n        const currentUrl = new URL(window.location.href);\n        const publicKey = currentUrl.searchParams.get('public_key') || '';\n        const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n        const accountId = currentUrl.searchParams.get('account_id') || '';\n        // TODO: Handle errors during login\n        if (accountId) {\n            this._authData = {\n                accountId,\n                allKeys\n            };\n            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n            if (publicKey) {\n                await this._moveKeyFromTempToPermanent(accountId, publicKey);\n            }\n        }\n        currentUrl.searchParams.delete('public_key');\n        currentUrl.searchParams.delete('all_keys');\n        currentUrl.searchParams.delete('account_id');\n        window.history.replaceState({}, document.title, currentUrl.toString());\n    }\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n    async _moveKeyFromTempToPermanent(accountId, publicKey) {\n        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        await this._keyStore.setKey(this._networkId, accountId, keyPair);\n        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n    signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n    account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\nclass ConnectedWalletAccount extends account_1.Account {\n    constructor(walletConnection, connection, accountId) {\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    /**\n     * Sign a transaction by redirecting to the NEAR Wallet\n     * @see {@link WalletConnection.requestSignTransactions}\n     */\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n        if (localKey && localKey.toString() === accessKey.public_key) {\n            try {\n                return await super.signAndSendTransaction({ receiverId, actions });\n            }\n            catch (e) {\n                if (e.type === 'NotEnoughAllowance') {\n                    accessKey = await this.accessKeyForTransaction(receiverId, actions);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = borsh_1.baseDecode(block.header.hash);\n        const publicKey = utils_1.PublicKey.from(accessKey.public_key);\n        // TODO: Cache & listen for nonce updates for given access key\n        const nonce = accessKey.access_key.nonce + 1;\n        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n        await this.walletConnection.requestSignTransactions({\n            transactions: [transaction],\n            meta: walletMeta,\n            callbackUrl: walletCallbackUrl\n        });\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reject(new Error('Failed to redirect to sign transaction'));\n            }, 1000);\n        });\n        // TODO: Aggregate multiple transaction request with \"debounce\".\n        // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        const { access_key: { permission } } = accessKey;\n        if (permission === 'FullAccess') {\n            return true;\n        }\n        if (permission.FunctionCall) {\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n            /********************************\n            Accept multisig access keys and let wallets attempt to signAndSendTransaction\n            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n            ********************************/\n            if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                return true;\n            }\n            if (allowedReceiverId === receiverId) {\n                if (actions.length !== 1) {\n                    return false;\n                }\n                const [{ functionCall }] = actions;\n                return functionCall &&\n                    (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?\n                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\n            }\n        }\n        // TODO: Support other permissions than FunctionCall\n        return false;\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n    async accessKeyForTransaction(receiverId, actions, localKey) {\n        const accessKeys = await this.getAccessKeys();\n        if (localKey) {\n            const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        const walletKeys = this.walletConnection._authData.allKeys;\n        for (const accessKey of accessKeys) {\n            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        return null;\n    }\n}\nexports.ConnectedWalletAccount = ConnectedWalletAccount;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/near-api-js/lib/wallet-account.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}}],"sources":{"../node_modules/near-api-js/lib/wallet-account.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectedWalletAccount = exports.WalletAccount = exports.WalletConnection = void 0;\n/**\n * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:\n * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys\n *\n * @module walletAccount\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nconst borsh_1 = require(\"borsh\");\nconst borsh_2 = require(\"borsh\");\nconst LOGIN_WALLET_URL_SUFFIX = '/login/';\nconst MULTISIG_HAS_METHOD = 'add_request_and_confirm';\nconst LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';\nconst PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\n/**\n * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.\n * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}\n * @example\n * ```js\n * // create new WalletConnection instance\n * const wallet = new WalletConnection(near, 'my-app');\n *\n * // If not signed in redirect to the NEAR wallet to sign in\n * // keys will be stored in the BrowserLocalStorageKeyStore\n * if(!wallet.isSingnedIn()) return wallet.requestSignIn()\n * ```\n */\nclass WalletConnection {\n    constructor(near, appKeyPrefix) {\n        this._near = near;\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\n        const authData = JSON.parse(window.localStorage.getItem(authDataKey));\n        this._networkId = near.config.networkId;\n        this._walletBaseUrl = near.config.walletUrl;\n        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';\n        this._keyStore = near.connection.signer.keyStore;\n        this._authData = authData || { allKeys: [] };\n        this._authDataKey = authDataKey;\n        if (!this.isSignedIn()) {\n            this._completeSignInWithAccessKey();\n        }\n    }\n    /**\n     * Returns true, if this WalletAccount is authorized with the wallet.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.isSignedIn();\n     * ```\n     */\n    isSignedIn() {\n        return !!this._authData.accountId;\n    }\n    /**\n     * Returns authorized Account ID.\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * wallet.getAccountId();\n     * ```\n     */\n    getAccountId() {\n        return this._authData.accountId || '';\n    }\n    /**\n     * Redirects current page to the wallet authentication page.\n     * @param options An optional options object\n     * @param options.contractId The NEAR account where the contract is deployed\n     * @param options.successUrl URL to redirect upon success. Default: current url\n     * @param options.failureUrl URL to redirect upon failure. Default: current url\n     *\n     * @example\n     * ```js\n     * const wallet = new WalletConnection(near, 'my-app');\n     * // redirects to the NEAR Wallet\n     * wallet.requestSignIn({ contractId: 'account-with-deploy-contract.near' });\n     * ```\n     */\n    async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {\n        let options;\n        if (typeof contractIdOrOptions === 'string') {\n            const deprecate = depd_1.default('requestSignIn(contractId, title)');\n            deprecate('`title` ignored; use `requestSignIn({ contractId, methodNames, successUrl, failureUrl })` instead');\n            options = { contractId: contractIdOrOptions, successUrl, failureUrl };\n        }\n        else {\n            options = contractIdOrOptions;\n        }\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);\n        newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);\n        newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);\n        if (options.contractId) {\n            /* Throws exception if contract account does not exist */\n            const contractAccount = await this._near.account(options.contractId);\n            await contractAccount.state();\n            newUrl.searchParams.set('contract_id', options.contractId);\n            const accessKey = utils_1.KeyPair.fromRandom('ed25519');\n            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());\n            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);\n        }\n        if (options.methodNames) {\n            options.methodNames.forEach(methodName => {\n                newUrl.searchParams.append('methodNames', methodName);\n            });\n        }\n        window.location.assign(newUrl.toString());\n    }\n    async requestSignTransactions(...args) {\n        if (Array.isArray(args[0])) {\n            const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');\n            deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');\n            return this._requestSignTransactions({\n                transactions: args[0],\n                callbackUrl: args[1],\n                meta: args[2]\n            });\n        }\n        return this._requestSignTransactions(args[0]);\n    }\n    async _requestSignTransactions({ transactions, meta, callbackUrl }) {\n        const currentUrl = new URL(window.location.href);\n        const newUrl = new URL('sign', this._walletBaseUrl);\n        newUrl.searchParams.set('transactions', transactions\n            .map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction))\n            .map(serialized => Buffer.from(serialized).toString('base64'))\n            .join(','));\n        newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);\n        if (meta)\n            newUrl.searchParams.set('meta', meta);\n        window.location.assign(newUrl.toString());\n    }\n    /**\n     * @hidden\n     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.\n     */\n    async _completeSignInWithAccessKey() {\n        const currentUrl = new URL(window.location.href);\n        const publicKey = currentUrl.searchParams.get('public_key') || '';\n        const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');\n        const accountId = currentUrl.searchParams.get('account_id') || '';\n        // TODO: Handle errors during login\n        if (accountId) {\n            this._authData = {\n                accountId,\n                allKeys\n            };\n            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));\n            if (publicKey) {\n                await this._moveKeyFromTempToPermanent(accountId, publicKey);\n            }\n        }\n        currentUrl.searchParams.delete('public_key');\n        currentUrl.searchParams.delete('all_keys');\n        currentUrl.searchParams.delete('account_id');\n        window.history.replaceState({}, document.title, currentUrl.toString());\n    }\n    /**\n     * @hidden\n     * @param accountId The NEAR account owning the given public key\n     * @param publicKey The public key being set to the key store\n     */\n    async _moveKeyFromTempToPermanent(accountId, publicKey) {\n        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n        await this._keyStore.setKey(this._networkId, accountId, keyPair);\n        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);\n    }\n    /**\n     * Sign out from the current account\n     * @example\n     * walletAccount.signOut();\n     */\n    signOut() {\n        this._authData = {};\n        window.localStorage.removeItem(this._authDataKey);\n    }\n    /**\n     * Returns the current connected wallet account\n     */\n    account() {\n        if (!this._connectedAccount) {\n            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);\n        }\n        return this._connectedAccount;\n    }\n}\nexports.WalletConnection = WalletConnection;\nexports.WalletAccount = WalletConnection;\n/**\n * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.\n */\nclass ConnectedWalletAccount extends account_1.Account {\n    constructor(walletConnection, connection, accountId) {\n        super(connection, accountId);\n        this.walletConnection = walletConnection;\n    }\n    // Overriding Account methods\n    /**\n     * Sign a transaction by redirecting to the NEAR Wallet\n     * @see {@link WalletConnection.requestSignTransactions}\n     */\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);\n        if (!accessKey) {\n            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);\n        }\n        if (localKey && localKey.toString() === accessKey.public_key) {\n            try {\n                return await super.signAndSendTransaction({ receiverId, actions });\n            }\n            catch (e) {\n                if (e.type === 'NotEnoughAllowance') {\n                    accessKey = await this.accessKeyForTransaction(receiverId, actions);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = borsh_1.baseDecode(block.header.hash);\n        const publicKey = utils_1.PublicKey.from(accessKey.public_key);\n        // TODO: Cache & listen for nonce updates for given access key\n        const nonce = accessKey.access_key.nonce + 1;\n        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);\n        await this.walletConnection.requestSignTransactions({\n            transactions: [transaction],\n            meta: walletMeta,\n            callbackUrl: walletCallbackUrl\n        });\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                reject(new Error('Failed to redirect to sign transaction'));\n            }, 1000);\n        });\n        // TODO: Aggregate multiple transaction request with \"debounce\".\n        // TODO: Introduce TrasactionQueue which also can be used to watch for status?\n    }\n    /**\n     * Check if given access key allows the function call or method attempted in transaction\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\n     * @param receiverId The NEAR account attempting to have access\n     * @param actions The action(s) needed to be checked for access\n     */\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\n        const { access_key: { permission } } = accessKey;\n        if (permission === 'FullAccess') {\n            return true;\n        }\n        if (permission.FunctionCall) {\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\n            /********************************\n            Accept multisig access keys and let wallets attempt to signAndSendTransaction\n            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\n            ********************************/\n            if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {\n                return true;\n            }\n            if (allowedReceiverId === receiverId) {\n                if (actions.length !== 1) {\n                    return false;\n                }\n                const [{ functionCall }] = actions;\n                return functionCall &&\n                    (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?\n                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\n            }\n        }\n        // TODO: Support other permissions than FunctionCall\n        return false;\n    }\n    /**\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\n     * @param receiverId The NEAR account seeking the access key for a transaction\n     * @param actions The action(s) sought to gain access to\n     * @param localKey A local public key provided to check for access\n     * @returns Promise<any>\n     */\n    async accessKeyForTransaction(receiverId, actions, localKey) {\n        const accessKeys = await this.getAccessKeys();\n        if (localKey) {\n            const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());\n            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        const walletKeys = this.walletConnection._authData.allKeys;\n        for (const accessKey of accessKeys) {\n            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {\n                return accessKey;\n            }\n        }\n        return null;\n    }\n}\nexports.ConnectedWalletAccount = ConnectedWalletAccount;\n"},"lineCount":317}},"error":null,"hash":"61534339fcb0a9fceccbb7a2958c3bad","cacheData":{"env":{}}}